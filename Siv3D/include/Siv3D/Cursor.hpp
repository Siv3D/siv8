//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2024 Ryo Suzuki
//	Copyright (c) 2016-2024 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include "Common.hpp"
# include "PointVector.hpp"
# include "Array.hpp"

namespace s3d
{
	struct Mat3x2;
	class Image;

	namespace Cursor
	{
		////////////////////////////////////////////////////////////////
		//
		//	Pos, PosF
		//
		////////////////////////////////////////////////////////////////

		/// @brief 現在のフレームにおける、マウスカーソルのクライアント座標（ピクセル）を返します。
		/// @return 現在のフレームにおける、マウスカーソルの座標 (ピクセル)
		[[nodiscard]]
		Point Pos() noexcept;

		/// @brief 現在のフレームにおける、マウスカーソルのクライアント座標（ピクセル）を返します。
		/// @remark 座標が小数値を含む場合があります。
		/// @return 現在のフレームおける、マウスカーソルの座標 (ピクセル)
		[[nodiscard]]
		Vec2 PosF() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	PreviousPos, PreviousPosF
		//
		////////////////////////////////////////////////////////////////

		/// @brief 直前のフレームにおける、マウスカーソルのクライアント座標（ピクセル）を返します。
		/// @return 直前のフレームおける、マウスカーソルの座標 (ピクセル)
		[[nodiscard]]
		Point PreviousPos() noexcept;

		/// @brief 直前のフレームにおける、マウスカーソルのクライアント座標（ピクセル）を返します。
		/// @remark 座標が小数値を含む場合があります。
		/// @return 直前のフレームおける、マウスカーソルの座標 (ピクセル)
		[[nodiscard]]
		Vec2 PreviousPosF() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	Delta, DeltaF
		//
		////////////////////////////////////////////////////////////////

		/// @brief 直前のフレームから現在のフレームまでのマウスカーソルの移動量（ピクセル）を返します。
		/// @remark `Cursor::Pos() - Cursor::PreviousPos()` と同値です。
		/// @return 直前のフレームから現在のフレームまでのマウスカーソルの移動量 (ピクセル)
		[[nodiscard]]
		Point Delta() noexcept;

		/// @brief 直前のフレームから現在のフレームまでのマウスカーソルの移動量（ピクセル）を返します。
		/// @remark `Cursor::PosF() - Cursor::PreviousPosF()` と同値です。
		/// @remark 移動量が小数値を含む場合があります。
		/// @return 直前のフレームから現在のフレームまでのマウスカーソルの移動量 (ピクセル)
		[[nodiscard]]
		Vec2 DeltaF() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	PosRaw
		//
		////////////////////////////////////////////////////////////////

		/// @brief 現在のフレームにおける、補正前のマウスカーソルのクライアント座標（ピクセル）を返します。
		/// @return 現在のフレームおける、補正前のマウスカーソルの座標 (ピクセル)
		[[nodiscard]]
		Point PosRaw() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	PreviousPosRaw
		//
		////////////////////////////////////////////////////////////////

		/// @brief 直前のフレームにおける、補正前のマウスカーソルのクライアント座標（ピクセル）を返します。
		/// @return 直前のフレームおける、補正前のマウスカーソルの座標 (ピクセル)
		[[nodiscard]]
		Point PreviousPosRaw() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	DeltaRaw
		//
		////////////////////////////////////////////////////////////////

		/// @brief 直前のフレームから現在のフレームまでの、補正前のマウスカーソルの移動量（ピクセル）を返します。
		/// @remark `Cursor::PosRaw() - Cursor::PreviousPosRaw()` と同値です。
		/// @return 直前のフレームから現在のフレームまでの、補正前のマウスカーソルの移動量 (ピクセル)
		[[nodiscard]]
		Point DeltaRaw() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	ScreenPos
		//
		////////////////////////////////////////////////////////////////

		/// @brief 現在のフレームにおける、マウスカーソルのスクリーン座標（ピクセル）を返します。
		/// @return 現在のフレームおける、マウスカーソルのスクリーン座標 (ピクセル)
		[[nodiscard]]
		Point ScreenPos() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	ScreenPreviousPos
		//
		////////////////////////////////////////////////////////////////

		/// @brief 直前のフレームにおける、マウスカーソルのスクリーン座標（ピクセル）を返します。
		/// @return 直前のフレームおける、マウスカーソルのスクリーン座標 (ピクセル)
		[[nodiscard]]
		Point ScreenPreviousPos() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	ScreenDelta
		//
		////////////////////////////////////////////////////////////////

		/// @brief 直前のフレームから現在のフレームまでの、スクリーン上でのマウスカーソルの移動量（ピクセル）を返します。
		/// @remark `Cursor::ScreenPos() - Cursor::ScreenPreviousPos()` と同値です。
		/// @return 直前のフレームから現在のフレームまでのスクリーン上でのマウスカーソルの移動量 (ピクセル)
		[[nodiscard]]
		Point ScreenDelta() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	GetBuffer
		//
		////////////////////////////////////////////////////////////////

		/// @brief 高頻度で記録された、マウスカーソルのクライアント座標（ピクセル）の情報を返します。
		/// @return タイムポイント（`Time::GetMicrosec()`）と、補正前のマウスカーソルのクライアント座標 (ピクセル) からなるペアの配列
		[[nodiscard]]
		Array<std::pair<int64, Point>> GetBuffer();

		////////////////////////////////////////////////////////////////
		//
		//	SetPos
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルを指定したクライアント座標に移動させます。
		/// @param x 移動先の X 座標 (ピクセル)
		/// @param y 移動先の Y 座標 (ピクセル)
		void SetPos(int32 x, int32 y);

		/// @brief マウスカーソルを指定したクライアント座標に移動させます。
		/// @param pos 移動先の座標 (ピクセル)
		void SetPos(Point pos);

		////////////////////////////////////////////////////////////////
		//
		//	OnClientRect
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルがクライアント画面上にあるかを返します。
		/// @return マウスカーソルがクライアント画面上にある場合 true, それ以外の場合は false
		[[nodiscard]]
		bool OnClientRect();

		////////////////////////////////////////////////////////////////
		//
		//	IsClippedToWindow
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルの移動範囲をクライアント画面に制限されているかを返します。
		/// @return 制限されている場合 true, それ以外の場合は false
		[[nodiscard]]
		bool IsClippedToWindow() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	ClipToWindow
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルの移動範囲をクライアント画面に制限します
		/// @param clip 制限を設定する場合 true, 解除する場合は false
		void ClipToWindow(bool clip);

		////////////////////////////////////////////////////////////////
		//
		//	GetBaseWindowTransform
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルのクライアント座標に適用されているベース座標変換行列を返します。
		/// @return 適用されているベースウィンドウ座標変換行列
		[[nodiscard]]
		const Mat3x2& GetBaseWindowTransform() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	GetCameraTransform
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルのクライアント座標に適用されているカメラ座標変換を返します。
		/// @return 適用されているカメラ座標変換
		[[nodiscard]]
		const Mat3x2& GetCameraTransform() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	GetLocalTransform
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルのクライアント座標に適用されているローカル座標変換を返します。
		/// @return 適用されているローカル座標変換
		[[nodiscard]]
		const Mat3x2& GetLocalTransform() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	SetCapture
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルのキャプチャ状態を設定します。
		/// @param captured キャプチャ状態にする場合 true, 解除する場合は false
		void SetCapture(bool captured) noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	IsCaptured
		//
		////////////////////////////////////////////////////////////////

		/// @brief マウスカーソルのキャプチャ状態を返します。
		/// @return マウスカーソルがキャプチャされている場合 true, それ以外の場合は false
		[[nodiscard]]
		bool IsCaptured() noexcept;
	}
}

# include "detail/Cursor.ipp"
