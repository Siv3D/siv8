//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2024 Ryo Suzuki
//	Copyright (c) 2016-2024 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include "Common.hpp"
# include "StringView.hpp"
# include "Format.hpp"

namespace s3d
{
	struct WindowState;
	enum class WindowStyle : uint8;
	struct Point;

	namespace Window
	{
		////////////////////////////////////////////////////////////////
		//
		//	DefaultTitle
		//
		////////////////////////////////////////////////////////////////

		/// @brief ウィンドウのデフォルトのタイトル
		inline constexpr StringView DefaultTitle = U"Siv3D App";

		////////////////////////////////////////////////////////////////
		//
		//	SetTitle
		//
		////////////////////////////////////////////////////////////////

		/// @brief ウィンドウのタイトルを変更します。
		/// @param title 新しいタイトル
		void SetTitle(const String& title);

		/// @brief ウィンドウのタイトルを変更します。
		/// @tparam ...Args 新しいタイトルの値の型
		/// @param ...args 新しいタイトル
		void SetTitle(const Concept::Formattable auto&... args);

		////////////////////////////////////////////////////////////////
		//
		//	GetTitle
		//
		////////////////////////////////////////////////////////////////

		/// @brief 現在のウィンドウのタイトルを返します。
		/// @return  現在のウィンドウのタイトル
		[[nodiscard]]
		const String& GetTitle() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	GetState
		//
		////////////////////////////////////////////////////////////////

		/// @brief 現在のウィンドウの状態を返します。
		/// @return 現在のウィンドウの状態
		[[nodiscard]]
		const WindowState& GetState() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	SetStyle
		//
		////////////////////////////////////////////////////////////////

		/// @brief ウィンドウスタイルを変更します。
		/// @param style 新しいウィンドウスタイル
		void SetStyle(WindowStyle style);

		////////////////////////////////////////////////////////////////
		//
		//	GetStyle
		//
		////////////////////////////////////////////////////////////////

		/// @brief 現在のウィンドウスタイルを返します。
		/// @return 現在のウィンドウスタイル
		[[nodiscard]]
		WindowStyle GetStyle() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	SetPos
		//
		////////////////////////////////////////////////////////////////

		/// @brief ウィンドウを指定したスクリーン座標に移動させます。
		/// @param screenPos 移動先のスクリーン座標
		void SetPos(Point screenPos);

		/// @brief ウィンドウを指定したスクリーン座標に移動させます。
		/// @param screenX 移動先のスクリーン X 座標
		/// @param screenY 移動先のスクリーン Y 座標
		void SetPos(int32 screenX, int32 screenY);

		////////////////////////////////////////////////////////////////
		//
		//	GetPos
		//
		////////////////////////////////////////////////////////////////

		/// @brief 現在のウィンドウの位置をスクリーン座標で返します。
		/// @return 現在のウィンドウの位置
		[[nodiscard]]
		Point GetPos() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	CenterToScreen
		//
		////////////////////////////////////////////////////////////////

		/// @brief 現在のモニターのワークエリアの中央にウィンドウを移動させます。
		/// @return 移動に成功した場合 true, それ以外の場合は false
		bool CenterToScreen();

		/// @brief 指定したモニターのワークエリアの中央にウィンドウを移動させます。
		/// @param monitorIndex モニターのインデックス
		/// @return 移動に成功した場合 true, それ以外の場合は false
		bool CenterToScreen(size_t monitorIndex);

		////////////////////////////////////////////////////////////////
		//
		//	Maximize
		//
		////////////////////////////////////////////////////////////////

		/// @brief ウィンドウを最大化します。
		void Maximize();

		////////////////////////////////////////////////////////////////
		//
		//	Restore
		//
		////////////////////////////////////////////////////////////////

		/// @brief 最大・最小化されたウィンドウを元のサイズに戻します。
		void Restore();

		////////////////////////////////////////////////////////////////
		//
		//	Minimize
		//
		////////////////////////////////////////////////////////////////

		/// @brief ウィンドウを最小化します。
		void Minimize();

	}
}

# include "detail/Window.ipp"
