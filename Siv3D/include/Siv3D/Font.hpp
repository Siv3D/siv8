//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2025 Ryo Suzuki
//	Copyright (c) 2016-2025 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include "Common.hpp"
# include "AssetHandle.hpp"
# include "FontMethod.hpp"
# include "FontStyle.hpp"

namespace s3d
{
	struct FontFaceProperties;

	////////////////////////////////////////////////////////////////
	//
	//	Font
	//
	////////////////////////////////////////////////////////////////

	/// @brief 頂点シェーダ
	class Font : public AssetHandle<Font>
	{
	public:

		////////////////////////////////////////////////////////////////
		//
		//	(constructor)
		//
		////////////////////////////////////////////////////////////////

		/// @brief デフォルトコンストラクタ
		[[nodiscard]]
		Font();

		Font(FontMethod fontMethod, int32 baseSize, FilePathView path, size_t faceIndex, StringView styleName, FontStyle style = FontStyle::Normal);

		////////////////////////////////////////////////////////////////
		//
		//	(destructor)
		//
		////////////////////////////////////////////////////////////////

		/// @brief デストラクタ
		virtual ~Font();
		
		////////////////////////////////////////////////////////////////
		//
		//	baseSize
		//
		////////////////////////////////////////////////////////////////

		/// @brief フォトの基本サイズを返します。
		/// @return フォントの基本サイズ
		[[nodiscard]]
		int32 baseSize() const;

		////////////////////////////////////////////////////////////////
		//
		//	method
		//
		////////////////////////////////////////////////////////////////

		/// @brief フォントのレンダリング方式を返します。
		/// @return フォントのレンダリング方式
		[[nodiscard]]
		FontMethod method() const;

		////////////////////////////////////////////////////////////////
		//
		//	style
		//
		////////////////////////////////////////////////////////////////
		
		/// @brief フォントのスタイルを返します。
		/// @return フォントのスタイル
		[[nodiscard]]
		FontStyle style() const;

		////////////////////////////////////////////////////////////////
		//
		//	properties
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		const FontFaceProperties& properties() const;

		////////////////////////////////////////////////////////////////
		//
		//	ascender
		//
		////////////////////////////////////////////////////////////////

		/// @brief フォントのアセンダーの高さ（ピクセル）を返します。
		/// @return フォントのアセンダーの高さ（ピクセル）
		[[nodiscard]]
		double ascender() const;

		////////////////////////////////////////////////////////////////
		//
		//	descender
		//
		////////////////////////////////////////////////////////////////

		/// @brief フォントのディセンダーの高さ（ピクセル）を返します。
		/// @return フォントのディセンダーの高さ（ピクセル）
		[[nodiscard]]
		double descender() const;

		////////////////////////////////////////////////////////////////
		//
		//	height
		//
		////////////////////////////////////////////////////////////////

		/// @brief フォントの高さ（ピクセル）を返します。
		/// @remark `ascender() + descender()` と一致します。
		/// @return フォントの高さ（ピクセル）
		[[nodiscard]]
		double height() const;

		////////////////////////////////////////////////////////////////
		//
		//	spaceXAdvance
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double spaceXAdvance() const;

		////////////////////////////////////////////////////////////////
		//
		//	spaceYAdvance
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double spaceYAdvance() const;

		////////////////////////////////////////////////////////////////
		//
		//	tabSize
		//
		////////////////////////////////////////////////////////////////

		/// @brief インデントに含まれるスペースの数を返します。
		/// @return インデントに含まれるスペースの数
		[[nodiscard]]
		int32 tabSize() const;

		////////////////////////////////////////////////////////////////
		//
		//	setTabSize
		//
		////////////////////////////////////////////////////////////////

		/// @brief インデントに含まれるスペースの数を設定します。
		/// @param tabSize インデントに含まれるスペースの数
		/// @return *this
		const Font& setTabSize(int32 tabSize) const;



		////////////////////////////////////////////////////////////////
		//
		//	swap
		//
		////////////////////////////////////////////////////////////////

		/// @brief 別の Font と内容を交換します。
		/// @param Font 別の Font
		void swap(Font& other) noexcept;











		////////////////////////////////////////////////////////////////
		//
		//	swap
		//
		////////////////////////////////////////////////////////////////

		/// @brief 2 つの Font を入れ替えます。
		/// @param lhs 一方の Font
		/// @param rhs もう一方の Font
		friend void swap(Font& lhs, Font& rhs) noexcept
		{
			lhs.swap(rhs);
		}
	};
}

