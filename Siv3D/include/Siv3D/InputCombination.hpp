//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2024 Ryo Suzuki
//	Copyright (c) 2016-2024 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include "Common.hpp"
# include "Input.hpp"

namespace s3d
{
	class InputGroup;

	////////////////////////////////////////////////////////////////
	//
	//	InputCombination
	//
	////////////////////////////////////////////////////////////////

	class InputCombination
	{
	public:

		////////////////////////////////////////////////////////////////
		//
		//	(constructor)
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		InputCombination() = default;

		[[nodiscard]]
		constexpr InputCombination(Input input1, Input input2) noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	name
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		String name() const;

		////////////////////////////////////////////////////////////////
		//
		//	down, pressed, up
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		bool down() const;

		[[nodiscard]]
		bool pressed() const;

		[[nodiscard]]
		bool up() const;

		////////////////////////////////////////////////////////////////
		//
		//	pressedDuration
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		Duration pressedDuration() const;

		////////////////////////////////////////////////////////////////
		//
		//	input1, input2
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		constexpr const Input& input1() const noexcept;

		[[nodiscard]]
		constexpr const Input& input2() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	operator |
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		InputGroup operator |(Input other) const;

		[[nodiscard]]
		InputGroup operator |(const InputCombination& other) const;

		[[nodiscard]]
		InputGroup operator |(const InputGroup& other) const;

		////////////////////////////////////////////////////////////////
		//
		//	asUint64
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		constexpr uint64 asUint64() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	operator ==
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		friend constexpr bool operator ==(InputCombination lhs, InputCombination rhs) noexcept
		{
			return (lhs.asUint64() == rhs.asUint64());
		}

		////////////////////////////////////////////////////////////////
		//
		//	operator <=>
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		friend constexpr auto operator <=>(InputCombination lhs, InputCombination rhs) noexcept
		{
			return (lhs.asUint64() <=> rhs.asUint64());
		}

		////////////////////////////////////////////////////////////////
		//
		//	operator <<
		//
		////////////////////////////////////////////////////////////////

		template <class CharType>
		friend std::basic_ostream<CharType>& operator <<(std::basic_ostream<CharType>& output, const InputCombination& value)
		{
			return output << value.name();
		}

		////////////////////////////////////////////////////////////////
		//
		//	Formatter
		//
		////////////////////////////////////////////////////////////////

		friend void Formatter(FormatData& formatData, const InputCombination& value);

	private:

		Input m_input1, m_input2;
	};
}
