//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2024 Ryo Suzuki
//	Copyright (c) 2016-2024 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include <memory>
# include "Common.hpp"
# include "Concepts.hpp"
# include "String.hpp"
# include "FormatData.hpp"

namespace s3d
{
	class BigFloat
	{
	public:

		////////////////////////////////////////////////////////////////
		//
		//	(constructor)
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		BigFloat();

		[[nodiscard]]
		BigFloat(const BigFloat& other);

		[[nodiscard]]
		BigFloat(BigFloat&& other) noexcept = default;

		[[nodiscard]]
		BigFloat(Concept::SignedIntegral auto i);

		[[nodiscard]]
		BigFloat(Concept::UnsignedIntegral auto i);

		[[nodiscard]]
		BigFloat(int64 i);

		[[nodiscard]]
		BigFloat(uint64 i);
	
		[[nodiscard]]
		BigFloat(long double f);
		
		[[nodiscard]]
		BigFloat(const BigInt& i);
		
		[[nodiscard]]
		explicit BigFloat(std::string_view number);
		
		[[nodiscard]]
		explicit BigFloat(StringView number);

		////////////////////////////////////////////////////////////////
		//
		//	(destructor)
		//
		////////////////////////////////////////////////////////////////

		~BigFloat();

		////////////////////////////////////////////////////////////////
		//
		//	operator =
		//
		////////////////////////////////////////////////////////////////

		BigFloat& operator =(int64 i);

		BigFloat& operator =(uint64 i);

		BigFloat& operator =(long double f);

		BigFloat& operator =(Concept::SignedIntegral auto i);

		BigFloat& operator =(Concept::UnsignedIntegral auto i);

		BigFloat& operator =(const BigInt& i);

		BigFloat& operator =(const BigFloat& other);

		BigFloat& operator =(BigFloat&& other) noexcept;

		BigFloat& operator =(std::string_view number);

		BigFloat& operator =(StringView number);

		////////////////////////////////////////////////////////////////
		//
		//	operator +
		//
		////////////////////////////////////////////////////////////////



		////////////////////////////////////////////////////////////////
		//
		//	operator -
		//
		////////////////////////////////////////////////////////////////



		////////////////////////////////////////////////////////////////
		//
		//	operator *
		//
		////////////////////////////////////////////////////////////////




		////////////////////////////////////////////////////////////////
		//
		//	operator /
		//
		////////////////////////////////////////////////////////////////



		////////////////////////////////////////////////////////////////
		//
		//	operator +=
		//
		////////////////////////////////////////////////////////////////



		////////////////////////////////////////////////////////////////
		//
		//	operator -=
		//
		////////////////////////////////////////////////////////////////


		////////////////////////////////////////////////////////////////
		//
		//	operator *=
		//
		////////////////////////////////////////////////////////////////



		////////////////////////////////////////////////////////////////
		//
		//	operator /=
		//
		////////////////////////////////////////////////////////////////



		////////////////////////////////////////////////////////////////
		//
		//	operator ++
		//
		////////////////////////////////////////////////////////////////


		////////////////////////////////////////////////////////////////
		//
		//	operator --
		//
		////////////////////////////////////////////////////////////////



		////////////////////////////////////////////////////////////////
		//
		//	operator ==
		//
		////////////////////////////////////////////////////////////////


		////////////////////////////////////////////////////////////////
		//
		//	operator <=>
		//
		////////////////////////////////////////////////////////////////


		////////////////////////////////////////////////////////////////
		//
		//	operator bool
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		explicit operator bool() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	isZero
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		bool isZero() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	isNaN
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		bool isNaN() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	isInf
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		bool isInf() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	sign
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		int32 sign() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	abs
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		BigFloat abs() const;

		////////////////////////////////////////////////////////////////
		//
		//	swap
		//
		////////////////////////////////////////////////////////////////

		void swap(BigFloat& other) noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	hash
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		uint64 hash() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	asFloat, asDouble, asLongDouble
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		float asFloat() const;

		[[nodiscard]]
		double asDouble() const;

		[[nodiscard]]
		long double asLongDouble() const;

		////////////////////////////////////////////////////////////////
		//
		//	operator float, operator double
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		explicit operator float() const noexcept;

		[[nodiscard]]
		explicit operator double() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	to_string
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		std::string to_string() const;

		////////////////////////////////////////////////////////////////
		//
		//	str
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		String str() const;

		////////////////////////////////////////////////////////////////
		//
		//	compare
		//
		////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////
		//
		//	swap
		//
		////////////////////////////////////////////////////////////////

		friend void swap(BigFloat& lhs, BigFloat& rhs) noexcept
		{
			lhs.swap(rhs);
		}

		////////////////////////////////////////////////////////////////
		//
		//	operator <<
		//
		////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////
		//
		//	operator >>
		//
		////////////////////////////////////////////////////////////////


		////////////////////////////////////////////////////////////////
		//
		//	Formatter
		//
		////////////////////////////////////////////////////////////////

		friend void Formatter(FormatData& formatData, const BigFloat& value);

	private:

		struct BigFloatDetail;

		std::unique_ptr<BigFloatDetail> pImpl;
	};

	inline namespace Literals
	{
		inline namespace BigNumLiterals
		{
			////////////////////////////////////////////////////////////////
			//
			//	_bigF
			//
			////////////////////////////////////////////////////////////////

			[[nodiscard]]
			BigFloat operator ""_bigF(const char* s);
		}
	}

	//namespace Math
	//{
	//	[[nodiscard]]
	//	BigFloat Fmod(const BigFloat& x, const BigFloat& y);

	//	[[nodiscard]]
	//	BigFloat Fraction(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Frexp(const BigFloat& x, int32& exp);

	//	[[nodiscard]]
	//	BigFloat Ldexp(const BigFloat& x, const BigFloat& y);

	//	[[nodiscard]]
	//	BigFloat Log(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Log2(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Log10(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Modf(const BigFloat& x, BigFloat& exp);

	//	[[nodiscard]]
	//	BigInt Pow(const BigInt& x, uint32 y);

	//	[[nodiscard]]
	//	BigFloat Pow(const BigFloat& x, const BigFloat& y);

	//	[[nodiscard]]
	//	int32 Sign(const BigInt& x);

	//	[[nodiscard]]
	//	int32 Sign(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat ToRadians(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat ToDegrees(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Abs(const BigInt& x);

	//	[[nodiscard]]
	//	BigFloat Abs(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat AbsDiff(const BigFloat& x, const BigFloat& y);

	//	[[nodiscard]]
	//	BigFloat Square(const BigInt& x);

	//	[[nodiscard]]
	//	BigFloat Square(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Exp(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Exp2(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Rsqrt(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Sqrt(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Ceil(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Floor(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Round(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Clamp(const BigFloat& x, const BigFloat& min, const BigFloat& max);

	//	[[nodiscard]]
	//	BigFloat Saturate(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Acos(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Asin(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Atan(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Atan2(const BigFloat& y, const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Cos(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Cosh(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Sin(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Sinh(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Tan(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Tanh(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Normalize(const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Smoothstep(const BigFloat& min, const BigFloat& max, const BigFloat& x);

	//	[[nodiscard]]
	//	BigFloat Smoothstep(const BigFloat& x);
	//}
}

////////////////////////////////////////////////////////////////
//
//	std::hash
//
////////////////////////////////////////////////////////////////

template <>
struct std::hash<s3d::BigFloat>
{
	[[nodiscard]]
	size_t operator ()(const s3d::BigFloat& value) const noexcept
	{
		return value.hash();
	}
};

# include "detail/BigFloat.ipp"
