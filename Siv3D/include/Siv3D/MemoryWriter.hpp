//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2024 Ryo Suzuki
//	Copyright (c) 2016-2024 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include "Common.hpp"
# include "IWriter.hpp"
# include "Blob.hpp"

namespace s3d
{
	////////////////////////////////////////////////////////////////
	//
	//	MemoryWriter
	//
	////////////////////////////////////////////////////////////////

	/// @brief メモリへのバイナリデータ書き出し
	class MemoryWriter : public IWriter
	{
	public:

		////////////////////////////////////////////////////////////////
		//
		//	(constructor)
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		MemoryWriter() = default;

		[[nodiscard]]
		explicit constexpr MemoryWriter(Arg::reserve_<size_t> reserveSizeBytes);

		////////////////////////////////////////////////////////////////
		//
		//	isOpen
		//
		////////////////////////////////////////////////////////////////

		/// @brief Writer にデータを書き込むことができるかを返します。
		/// @return 常に true
		[[nodiscard]]
		constexpr bool isOpen() const noexcept override;

		////////////////////////////////////////////////////////////////
		//
		//	operator bool
		//
		////////////////////////////////////////////////////////////////

		/// @brief Writer にデータを書き込むことができるかを返します。
		/// @return 常に true
		[[nodiscard]]
		constexpr explicit operator bool() const noexcept override;

		////////////////////////////////////////////////////////////////
		//
		//	size
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込まれたデータのサイズ（バイト）を返します。
		/// @return 書き込まれたデータのサイズ（バイト）
		[[nodiscard]]
		constexpr int64 size() const override;

		////////////////////////////////////////////////////////////////
		//
		//	getPos
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込み位置を返します。
		/// @return 書き込み位置
		[[nodiscard]]
		constexpr int64 getPos() const override;

		////////////////////////////////////////////////////////////////
		//
		//	setPos
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込み位置を変更します。
		/// @param pos 新しい書き込み位置
		/// @return 書き込み位置の変更に成功した場合 true, それ以外の場合は false
		constexpr bool setPos(int64 pos) override;

		////////////////////////////////////////////////////////////////
		//
		//	seekToEnd
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込み位置をデータの末尾に移動します。
		/// @return 新しい書き込み位置
		constexpr int64 seekToEnd();

		////////////////////////////////////////////////////////////////
		//
		//	write
		//
		////////////////////////////////////////////////////////////////

		/// @brief データを書き込みます。
		/// @param src 書き込むデータの先頭ポインタ
		/// @param sizeBytes 書き込むデータのサイズ（バイト）
		/// @return 書き込んだデータのサイズ（バイト）
		int64 write(const void* src, int64 sizeBytes) override;

		/// @brief データを書き込みます。
		/// @param src 書き込むデータ
		/// @return 書き込みに成功した場合 true, それ以外の場合は false
		bool write(const Concept::TriviallyCopyable auto& src);

		////////////////////////////////////////////////////////////////
		//
		//	retrieve
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込んだデータを Blob として受け取ります。
		/// @return 書き込んだデータ
		/// @remark 受け取った後は、Writer は空になります。
		[[nodiscard]]
		constexpr Blob retrieve() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	getBlob
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込んだデータへの参照を返します。
		/// @return 書き込んだデータへの参照
		[[nodiscard]]
		constexpr const Blob& getBlob() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	reserve
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込み先のメモリをあらかじめ確保します。
		/// @param sizeBytes 確保するメモリのサイズ（バイト）
		constexpr void reserve(size_t sizeBytes);

		////////////////////////////////////////////////////////////////
		//
		//	clear
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込んだ内容を全てクリアします。
		constexpr void clear();

		////////////////////////////////////////////////////////////////
		//
		//	shrink_to_fit
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込み先のメモリをデータのサイズに合わせて縮小します。
		constexpr void shrink_to_fit();

		////////////////////////////////////////////////////////////////
		//
		//	release
		//
		////////////////////////////////////////////////////////////////

		/// @brief 書き込んだ内容を全てクリアし、メモリを解放します。
		/// @remark `clear()` と `shrink_to_fit()` を呼び出します。
		constexpr void release();

	private:

		Blob m_blob;

		int64 m_writePos = 0;
	};
}

# include "detail/MemoryWriter.ipp"
