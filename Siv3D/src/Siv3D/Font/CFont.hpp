//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2025 Ryo Suzuki
//	Copyright (c) 2016-2025 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include "IFont.hpp"
# include <Siv3D/HashMap.hpp>
# include <Siv3D/Font.hpp>
# include <Siv3D/AssetHandleManager/AssetHandleManager.hpp>
# include "FontData.hpp"

namespace s3d
{
	class CFont final : public ISiv3DFont
	{
	public:

		////////////////////////////////////////////////////////////////
		//
		//	(constructor)
		//
		////////////////////////////////////////////////////////////////

		CFont();

		////////////////////////////////////////////////////////////////
		//
		//	(destructor)
		//
		////////////////////////////////////////////////////////////////

		~CFont();

		////////////////////////////////////////////////////////////////
		//
		//	init
		//
		////////////////////////////////////////////////////////////////

		void init() override;

		////////////////////////////////////////////////////////////////
		//
		//	getFontFaces
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		Array<FontFaceProperties> getFontFaces(FilePathView path) const override;

		////////////////////////////////////////////////////////////////
		//
		//	create
		//
		////////////////////////////////////////////////////////////////
		
		[[nodiscard]]
		Font::IDType create(Typeface typeface, FontMethod fontMethod, int32 baseSize, FontStyle style) override;

		[[nodiscard]]
		Font::IDType create(FilePathView path, size_t faceIndex, StringView styleName, FontMethod fontMethod, int32 baseSize, FontStyle style) override;

		////////////////////////////////////////////////////////////////
		//
		//	release
		//
		////////////////////////////////////////////////////////////////

		void release(Font::IDType handleID) override;

		////////////////////////////////////////////////////////////////
		//
		//	addFallbackFont
		//
		////////////////////////////////////////////////////////////////

		void addFallbackFont(Font::IDType handleID, const Font& font) override;

		////////////////////////////////////////////////////////////////
		//
		//	getInfo
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		const FontFaceInfo& getInfo(Font::IDType handleID) override;

		////////////////////////////////////////////////////////////////
		//
		//	setTabSize
		//
		////////////////////////////////////////////////////////////////

		void setTabSize(Font::IDType handleID, int32 tabSize) override;

		////////////////////////////////////////////////////////////////
		//
		//	getGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		GlyphIndex getGlyphIndex(Font::IDType handleID, char32 codePoint, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	getGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		GlyphIndex getGlyphIndex(Font::IDType handleID, StringView ch, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	getGlyphNameByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		String getGlyphNameByGlyphIndex(Font::IDType handleID, GlyphIndex glyphIndex) override;

		////////////////////////////////////////////////////////////////
		//
		//	getXAdvanceByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double getXAdvanceByGlyphIndex(Font::IDType handleID, GlyphIndex glyphIndex) override;

		////////////////////////////////////////////////////////////////
		//
		//	getYAdvanceByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double getYAdvanceByGlyphIndex(Font::IDType handleID, GlyphIndex glyphIndex) override;

		////////////////////////////////////////////////////////////////
		//
		//	getYAdvance
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double getYAdvance(Font::IDType handleID, StringView ch) override;

		////////////////////////////////////////////////////////////////
		//
		//	getResolvedGlyphs
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		Array<ResolvedGlyph> getResolvedGlyphs(Font::IDType handleID, StringView s, ReadingDirection readingDirection, EnableFallback enableFallback, EnableLigatures enableLigatures) override;

		////////////////////////////////////////////////////////////////
		//
		//	getGlyphInfoByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		GlyphInfo getGlyphInfoByGlyphIndex(Font::IDType handleID, GlyphIndex glyphIndex, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	renderOutlineByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		OutlineGlyph renderOutlineByGlyphIndex(Font::IDType handleID, GlyphIndex glyphIndex, CloseRing closeRing, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	renderBitmapByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		BitmapGlyph renderBitmapByGlyphIndex(Font::IDType handleID, GlyphIndex glyphIndex, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	getTexture
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		const Texture& getTexture(Font::IDType handleID) override;

		////////////////////////////////////////////////////////////////
		//
		//	getXAdvances
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		Array<double> getXAdvances(Font::IDType handleID, StringView s, const Array<ResolvedGlyph>& resolvedGlyphs, double fontSize) override;

		////////////////////////////////////////////////////////////////
		//
		//	xAdvanceFallback
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double xAdvanceFallback(Font::IDType handleID, const ResolvedGlyph& resolvedGlyph, double fontSize) override;

		////////////////////////////////////////////////////////////////
		//
		//	region
		//
		////////////////////////////////////////////////////////////////

		RectF region(Font::IDType handleID, StringView s, const Array<ResolvedGlyph>& resolvedGlyphs, const Vec2& pos, double fontSize, const TextStyle& textStyle, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	draw
		//
		////////////////////////////////////////////////////////////////

		RectF draw(Font::IDType handleID, StringView s, const Array<ResolvedGlyph>& resolvedGlyphs, const Vec2& pos, double fontSize, const TextStyle& textStyle, const ColorF& color, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	region
		//
		////////////////////////////////////////////////////////////////

		RectF regionBase(Font::IDType handleID, StringView s, const Array<ResolvedGlyph>& resolvedGlyphs, const Vec2& pos, double fontSize, const TextStyle& textStyle, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	drawBase
		//
		////////////////////////////////////////////////////////////////

		RectF drawBase(Font::IDType handleID, StringView s, const Array<ResolvedGlyph>& resolvedGlyphs, const Vec2& pos, double fontSize, const TextStyle& textStyle, const ColorF& color, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	regionBaseFallback
		//
		////////////////////////////////////////////////////////////////

		std::pair<double, double> regionBaseFallback(Font::IDType handleID, const ResolvedGlyph& resolvedGlyph, const Vec2& pos, double fontSize, const TextStyle& textStyle, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	drawBaseFallback
		//
		////////////////////////////////////////////////////////////////

		std::pair<double, double> drawBaseFallback(Font::IDType handleID, const ResolvedGlyph& resolvedGlyph, const Vec2& pos, double fontSize, const TextStyle& textStyle, const ColorF& color, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	fitsRect
		//
		////////////////////////////////////////////////////////////////

		bool fitsRect(Font::IDType handleID, StringView s, const Array<ResolvedGlyph>& resolvedGlyphs, const RectF& rect, double fontSize, const TextStyle& textStyle, ReadingDirection readingDirection) override;

		////////////////////////////////////////////////////////////////
		//
		//	drawRect
		//
		////////////////////////////////////////////////////////////////

		bool drawRect(Font::IDType handleID, StringView s, const Array<ResolvedGlyph>& resolvedGlyphs, const RectF& rect, double fontSize, const TextStyle& textStyle, const ColorF& color, ReadingDirection readingDirection) override;

	private:

		FT_Library m_freeType = nullptr;

		AssetHandleManager<Font::IDType, FontData> m_fonts{ "Font" };

		HashMap<Font::IDType, Array<Font>> m_fallbackFonts;
	};
}
