//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2025 Ryo Suzuki
//	Copyright (c) 2016-2025 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# pragma once
# include <Siv3D/FontMethod.hpp>
# include <Siv3D/MemoryMappedFileView.hpp>
# include "IFont.hpp"
# include "FontFace.hpp"

namespace s3d
{
	class IGlyphCache;

	class FontData
	{
	public:

		struct Null {};

		////////////////////////////////////////////////////////////////
		//
		//	(constructor)
		//
		////////////////////////////////////////////////////////////////

		FontData() = default;

		explicit FontData(Null);

		FontData(::FT_Library library, FilePathView path, size_t faceIndex, StringView styleName, FontMethod fontMethod, int32 baseSize, FontStyle style);

		////////////////////////////////////////////////////////////////
		//
		//	(destructor)
		//
		////////////////////////////////////////////////////////////////

		~FontData();

		////////////////////////////////////////////////////////////////
		//
		//	isInitialized
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		bool isInitialized() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	toString
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		String toString() const;

		////////////////////////////////////////////////////////////////
		//
		//	addFallbackFont
		//
		////////////////////////////////////////////////////////////////

		void addFallbackFont(Font::IDType handleID);

		////////////////////////////////////////////////////////////////
		//
		//	getFallbackFontIDs
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		const Array<Font::IDType>& getFallbackFontIDs() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	getFallbackFontID
		//
		////////////////////////////////////////////////////////////////

		Font::IDType getFallbackFontID(size_t index) const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	getFace
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		::FT_Face getFace() noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	getInfo
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		const FontFaceInfo& getInfo() const noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	setTabSize
		//
		////////////////////////////////////////////////////////////////

		void setTabSize(int32 tabSize) noexcept;

		////////////////////////////////////////////////////////////////
		//
		//	getGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		GlyphIndex getGlyphIndex(char32 codePoint);

		[[nodiscard]]
		GlyphIndex getGlyphIndex(StringView ch, ReadingDirection readingDirection);

		////////////////////////////////////////////////////////////////
		//
		//	getGlyphNameByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		String getGlyphNameByGlyphIndex(GlyphIndex glyphIndex);

		////////////////////////////////////////////////////////////////
		//
		//	getXAdvanceByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double getXAdvanceByGlyphIndex(GlyphIndex glyphIndex);

		////////////////////////////////////////////////////////////////
		//
		//	getYAdvanceByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double getYAdvanceByGlyphIndex(GlyphIndex glyphIndex);

		////////////////////////////////////////////////////////////////
		//
		//	getYAdvance
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		double getYAdvance(StringView ch);

		////////////////////////////////////////////////////////////////
		//
		//	getResolvedGlyphs
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		Array<ResolvedGlyph> getResolvedGlyphs(StringView s, ReadingDirection readingDirection, EnableFallback enableFallback, EnableLigatures enableLigatures);

		////////////////////////////////////////////////////////////////
		//
		//	getGlyphInfoByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		GlyphInfo getGlyphInfoByGlyphIndex(GlyphIndex glyphIndex, ReadingDirection readingDirection) const;

		////////////////////////////////////////////////////////////////
		//
		//	getGlyphCache
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		IGlyphCache& getGlyphCache() const;

		////////////////////////////////////////////////////////////////
		//
		//	renderBitmapByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		BitmapGlyph renderBitmapByGlyphIndex(GlyphIndex glyphIndex, ReadingDirection readingDirection);

		////////////////////////////////////////////////////////////////
		//
		//	renderMSDFByGlyphIndex
		//
		////////////////////////////////////////////////////////////////

		[[nodiscard]]
		MSDFGlyph renderMSDFByGlyphIndex(GlyphIndex glyphIndex, int32 buffer, ReadingDirection readingDirection);

	private:

		MemoryMappedFileView m_mappedFileView;

		std::unique_ptr<FontFace> m_face;

		Array<Font::IDType> m_fallbackFontIDs;

		FontMethod m_renderingMethod = FontMethod::Bitmap;

		std::unique_ptr<IGlyphCache> m_glyphCache;

		bool m_initialized = false;
	};
}
