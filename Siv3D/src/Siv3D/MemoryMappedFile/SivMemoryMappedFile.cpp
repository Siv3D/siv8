//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2024 Ryo Suzuki
//	Copyright (c) 2016-2024 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# include <Siv3D/MemoryMappedFile.hpp>
# include <Siv3D/MemoryMappedFile/MemoryMappedFileDetail.hpp>

namespace s3d
{
	////////////////////////////////////////////////////////////////
	//
	//	(constructor)
	//
	////////////////////////////////////////////////////////////////

	MemoryMappedFile::MemoryMappedFile()
		: pImpl{ std::make_shared<MemoryMappedFileDetail>() } {}

	MemoryMappedFile::MemoryMappedFile(const FilePathView path, const OpenMode_if_Exists ifExists, const OpenMode_if_NotFound ifNotFound)
		: MemoryMappedFile{}
	{
		open(path, ifExists, ifNotFound);
	}

	////////////////////////////////////////////////////////////////
	//
	//	open
	//
	////////////////////////////////////////////////////////////////

	bool MemoryMappedFile::open(const FilePathView path, const OpenMode_if_Exists ifExists, const OpenMode_if_NotFound ifNotFound)
	{
		return pImpl->open(path, ifExists, ifNotFound);
	}

	////////////////////////////////////////////////////////////////
	//
	//	close
	//
	////////////////////////////////////////////////////////////////

	void MemoryMappedFile::close()
	{
		pImpl->close();
	}

	////////////////////////////////////////////////////////////////
	//
	//	isOpen
	//
	////////////////////////////////////////////////////////////////

	bool MemoryMappedFile::isOpen() const
	{
		return pImpl->isOpen();
	}

	////////////////////////////////////////////////////////////////
	//
	//	operator bool
	//
	////////////////////////////////////////////////////////////////

	MemoryMappedFile::operator bool() const
	{
		return isOpen();
	}

	////////////////////////////////////////////////////////////////
	//
	//	map
	//
	////////////////////////////////////////////////////////////////

	MappedMemory MemoryMappedFile::map(const size_t offset, const size_t requestSize)
	{
		return pImpl->map(offset, requestSize);
	}

	////////////////////////////////////////////////////////////////
	//
	//	mapAll
	//
	////////////////////////////////////////////////////////////////

	MappedMemory MemoryMappedFile::mapAll()
	{
		return pImpl->map(0, pImpl->size());
	}

	////////////////////////////////////////////////////////////////
	//
	//	unmap
	//
	////////////////////////////////////////////////////////////////

	void MemoryMappedFile::unmap()
	{
		pImpl->unmap();
	}

	////////////////////////////////////////////////////////////////
	//
	//	flush
	//
	////////////////////////////////////////////////////////////////

	bool MemoryMappedFile::flush()
	{
		return pImpl->flush();
	}

	////////////////////////////////////////////////////////////////
	//
	//	size
	//
	////////////////////////////////////////////////////////////////

	int64 MemoryMappedFile::size() const
	{
		return pImpl->size();
	}

	////////////////////////////////////////////////////////////////
	//
	//	path
	//
	////////////////////////////////////////////////////////////////

	const FilePath& MemoryMappedFile::path() const
	{
		return pImpl->path();
	}
}
