//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2024 Ryo Suzuki
//	Copyright (c) 2016-2024 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# include <Siv3D/TextReader.hpp>
# include <Siv3D/TextReader/TextReaderDetail.hpp>

namespace s3d
{
	////////////////////////////////////////////////////////////////
	//
	//	(constructor)
	//
	////////////////////////////////////////////////////////////////

	TextReader::TextReader()
		: pImpl{ std::make_shared<TextReaderDetail>() } {}

	TextReader::TextReader(const FilePathView path, const Optional<TextEncoding>& encoding)
		: TextReader{}
	{
		open(path, encoding);
	}

	TextReader::TextReader(std::unique_ptr<IReader>&& reader, const Optional<TextEncoding>& encoding)
		: TextReader{}
	{
		open(std::move(reader), encoding);
	}

	////////////////////////////////////////////////////////////////
	//
	//	open
	//
	////////////////////////////////////////////////////////////////

	bool TextReader::open(const FilePathView path, const Optional<TextEncoding>& encoding)
	{
		return pImpl->open(path, encoding);
	}

	bool TextReader::open(std::unique_ptr<IReader>&& reader, const Optional<TextEncoding>& encoding)
	{
		return pImpl->open(std::move(reader), encoding);
	}

	////////////////////////////////////////////////////////////////
	//
	//	close
	//
	////////////////////////////////////////////////////////////////

	void TextReader::close()
	{
		pImpl->close();
	}

	////////////////////////////////////////////////////////////////
	//
	//	isOpen
	//
	////////////////////////////////////////////////////////////////

	bool TextReader::isOpen() const noexcept
	{
		return pImpl->isOpen();
	}

	////////////////////////////////////////////////////////////////
	//
	//	operator bool
	//
	////////////////////////////////////////////////////////////////

	TextReader::operator bool() const noexcept
	{
		return pImpl->isOpen();
	}

	////////////////////////////////////////////////////////////////
	//
	//	readChar
	//
	////////////////////////////////////////////////////////////////

	Optional<char32> TextReader::readChar()
	{
		char32 ch;

		if (pImpl->readChar(ch))
		{
			return ch;
		}
		else
		{
			return none;
		}
	}

	////////////////////////////////////////////////////////////////
	//
	//	readLine
	//
	////////////////////////////////////////////////////////////////

	Optional<String> TextReader::readLine()
	{
		String line;

		if (pImpl->readLine(line))
		{
			return line;
		}
		else
		{
			return none;
		}
	}

	////////////////////////////////////////////////////////////////
	//
	//	readLines
	//
	////////////////////////////////////////////////////////////////

	Array<String> TextReader::readLines()
	{
		Array<String> lines;

		pImpl->readLines(lines);

		return lines;
	}

	////////////////////////////////////////////////////////////////
	//
	//	readAll
	//
	////////////////////////////////////////////////////////////////

	String TextReader::readAll()
	{
		String s;
		
		pImpl->readAll(s);
		
		return s;
	}

	////////////////////////////////////////////////////////////////
	//
	//	readChar
	//
	////////////////////////////////////////////////////////////////

	bool TextReader::readChar(char32& ch)
	{
		return pImpl->readChar(ch);
	}

	////////////////////////////////////////////////////////////////
	//
	//	readLine
	//
	////////////////////////////////////////////////////////////////

	bool TextReader::readLine(std::string& line)
	{
		return pImpl->readLine(line);
	}

	bool TextReader::readLine(String& line)
	{
		return pImpl->readLine(line);
	}

	////////////////////////////////////////////////////////////////
	//
	//	readLines
	//
	////////////////////////////////////////////////////////////////

	bool TextReader::readLines(Array<std::string>& lines)
	{
		return pImpl->readLines(lines);
	}

	bool TextReader::readLines(Array<String>& lines)
	{
		return pImpl->readLines(lines);
	}

	////////////////////////////////////////////////////////////////
	//
	//	readAll
	//
	////////////////////////////////////////////////////////////////

	bool TextReader::readAll(std::string& s)
	{
		return pImpl->readAll(s);
	}

	bool TextReader::readAll(String& s)
	{
		return pImpl->readAll(s);
	}

	////////////////////////////////////////////////////////////////
	//
	//	encoding
	//
	////////////////////////////////////////////////////////////////

	TextEncoding TextReader::encoding() const noexcept
	{
		return pImpl->encoding();
	}

	////////////////////////////////////////////////////////////////
	//
	//	path
	//
	////////////////////////////////////////////////////////////////

	const FilePath& TextReader::path() const noexcept
	{
		return pImpl->path();
	}
}
