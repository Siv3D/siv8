//-----------------------------------------------
//
//	This file is part of the Siv3D Engine.
//
//	Copyright (c) 2008-2024 Ryo Suzuki
//	Copyright (c) 2016-2024 OpenSiv3D Project
//
//	Licensed under the MIT License.
//
//-----------------------------------------------

# include "CRenderer_D3D11.hpp"
# include <Siv3D/WindowState.hpp>
# include <Siv3D/Window/IWindow.hpp>
# include <Siv3D/Renderer2D/D3D11/CRenderer2D_D3D11.hpp>
# include <Siv3D/Engine/Siv3DEngine.hpp>
# include <Siv3D/EngineLog.hpp>

namespace s3d
{
	////////////////////////////////////////////////////////////////
	//
	//	(destructor)
	//
	////////////////////////////////////////////////////////////////

	CRenderer_D3D11::~CRenderer_D3D11()
	{
		LOG_SCOPED_DEBUG("CRenderer_D3D11::~CRenderer_D3D11()");
	}

	////////////////////////////////////////////////////////////////
	//
	//	getName
	//
	////////////////////////////////////////////////////////////////

	StringView CRenderer_D3D11::getName() const
	{
		static constexpr StringView name{ U"D3D11" };
		return name;
	}

	////////////////////////////////////////////////////////////////
	//
	//	init
	//
	////////////////////////////////////////////////////////////////

	void CRenderer_D3D11::init()
	{
		LOG_SCOPED_DEBUG("CRenderer_D3D11::init()");

		m_pRenderer2D = static_cast<CRenderer2D_D3D11*>(SIV3D_ENGINE(Renderer2D));

		m_device.init();

		const HWND hWnd = static_cast<HWND>(SIV3D_ENGINE(Window)->getHandle());
		const Size windowFrameBufferSize = SIV3D_ENGINE(Window)->getState().frameBufferSize;

		m_swapChain.init(hWnd, m_device, windowFrameBufferSize);
		m_backBuffer.init(m_device, m_swapChain.getSwapChain1(), this);
		m_blendState.init(m_device);
		m_rasterizerState.init(m_device);
		m_samplerState.init(m_device);
		m_depthStencilState.init(m_device);

		m_device.getContext()->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
	}

	////////////////////////////////////////////////////////////////
	//
	//	beginFrame
	//
	////////////////////////////////////////////////////////////////

	void CRenderer_D3D11::beginFrame()
	{
		m_backBuffer.clear(D3D11ClearTarget::Scene | D3D11ClearTarget::BackBuffer);

		if (const Size windowFrameBufferSize = SIV3D_ENGINE(Window)->getState().frameBufferSize;
			windowFrameBufferSize != m_backBuffer.getBackBufferSize())
		{
			m_backBuffer.resizeBackBuffer(windowFrameBufferSize);
		}

		m_pRenderer2D->beginFrame();
	}

	////////////////////////////////////////////////////////////////
	//
	//	flush
	//
	////////////////////////////////////////////////////////////////

	void CRenderer_D3D11::flush()
	{
		//pRenderer3D->flush();

		m_pRenderer2D->flush();

		m_backBuffer.renderSceneToBackBuffer();
	}

	////////////////////////////////////////////////////////////////
	//
	//	present
	//
	////////////////////////////////////////////////////////////////

	bool CRenderer_D3D11::present()
	{
		return m_swapChain.present();
	}

	////////////////////////////////////////////////////////////////
	//
	//	getSceneStyle
	//
	////////////////////////////////////////////////////////////////

	SceneStyle& CRenderer_D3D11::getSceneStyle() noexcept
	{
		return m_backBuffer.getSceneStyle();
	}

	////////////////////////////////////////////////////////////////
	//
	//	setSceneResizeMode
	//
	////////////////////////////////////////////////////////////////

	void CRenderer_D3D11::setSceneResizeMode(const ResizeMode resizeMode)
	{
		m_backBuffer.setSceneResizeMode(resizeMode);
	}

	////////////////////////////////////////////////////////////////
	//
	//	getSceneResizeMode
	//
	////////////////////////////////////////////////////////////////

	ResizeMode CRenderer_D3D11::getSceneResizeMode() const noexcept
	{
		return m_backBuffer.getSceneResizeMode();
	}

	////////////////////////////////////////////////////////////////
	//
	//	resizeSceneBuffer
	//
	////////////////////////////////////////////////////////////////

	void CRenderer_D3D11::resizeSceneBuffer(const Size size)
	{
		m_backBuffer.resizeSceneBuffer(size);
	}

	////////////////////////////////////////////////////////////////
	//
	//	getSceneBufferSize
	//
	////////////////////////////////////////////////////////////////

	const Size& CRenderer_D3D11::getSceneBufferSize() const noexcept
	{
		return m_backBuffer.getSceneBufferSize();
	}

	////////////////////////////////////////////////////////////////
	//
	//	getLetterboxComposition
	//
	////////////////////////////////////////////////////////////////

	std::pair<double, RectF> CRenderer_D3D11::getLetterboxComposition() const noexcept
	{
		return m_backBuffer.getLetterboxComposition();
	}

	////////////////////////////////////////////////////////////////
	//
	//	updateSceneSize
	//
	////////////////////////////////////////////////////////////////

	void CRenderer_D3D11::updateSceneSize()
	{
		m_backBuffer.updateSceneBufferSize();
	}

	////////////////////////////////////////////////////////////////
	//
	//	setVSyncEnabled
	//
	////////////////////////////////////////////////////////////////

	void CRenderer_D3D11::setVSyncEnabled(const bool enabled)
	{
		m_swapChain.setVSyncEnabled(enabled);
	}

	////////////////////////////////////////////////////////////////
	//
	//	isVSyncEnabled
	//
	////////////////////////////////////////////////////////////////

	bool CRenderer_D3D11::isVSyncEnabled() const
	{
		return m_swapChain.isVSyncEnabled();
	}

	////////////////////////////////////////////////////////////////
	//
	//	setLowLatencyMode
	//
	////////////////////////////////////////////////////////////////

	void CRenderer_D3D11::setLowLatencyMode(const bool enabled)
	{
		m_swapChain.setLowLatencyMode(enabled);
	}

	////////////////////////////////////////////////////////////////
	//
	//	isLowLatencyMode
	//
	////////////////////////////////////////////////////////////////

	bool CRenderer_D3D11::isLowLatencyMode() const
	{
		return m_swapChain.isLowLatencyMode();
	}

	////////////////////////////////////////////////////////////////
	//
	//	getDevice
	//
	////////////////////////////////////////////////////////////////

	const D3D11Device& CRenderer_D3D11::getDevice() const noexcept
	{
		return m_device;
	}

	D3D11BackBuffer& CRenderer_D3D11::getBackBuffer() noexcept
	{
		return m_backBuffer;
	}

	////////////////////////////////////////////////////////////////
	//
	//	getBlendState
	//
	////////////////////////////////////////////////////////////////

	D3D11BlendState& CRenderer_D3D11::getBlendState() noexcept
	{
		return m_blendState;
	}

	////////////////////////////////////////////////////////////////
	//
	//	getRasterizerState
	//
	////////////////////////////////////////////////////////////////

	D3D11RasterizerState& CRenderer_D3D11::getRasterizerState() noexcept
	{
		return m_rasterizerState;
	}

	////////////////////////////////////////////////////////////////
	//
	//	getSamplerState
	//
	////////////////////////////////////////////////////////////////

	D3D11SamplerState& CRenderer_D3D11::getSamplerState() noexcept
	{
		return m_samplerState;
	}

	////////////////////////////////////////////////////////////////
	//
	//	getDepthStencilState
	//
	////////////////////////////////////////////////////////////////

	D3D11DepthStencilState& CRenderer_D3D11::getDepthStencilState() noexcept
	{
		return m_depthStencilState;
	}
}
 